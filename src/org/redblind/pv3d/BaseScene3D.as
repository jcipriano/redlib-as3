package org.redblind.pv3d{	import org.papervision3d.view.stats.StatsView;		import org.papervision3d.cameras.Camera3D;			import flash.display.Sprite;		import flash.events.Event;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.scenes.Scene3D;	import org.papervision3d.view.Viewport3D;		public class BaseScene3D extends Sprite	{		protected var viewport:Viewport3D;      	protected var scene:Scene3D;      	protected var camera:Camera3D;          	protected var renderer:BasicRenderEngine;		private var _showStats:Boolean;		public var stats:StatsView;		private var renderMethods:Array = new Array();				/**		 * Creates Papervision3D environment.		 * #param	viewportWidth		Viewport3D parameter.		 * #param	viewportHeight		Viewport3D parameter.		 * #param	isAutoScaleToStage	Viewport3D parameter.		 * #param	isInteractive		Viewport3D parameter.		 */		public function BaseScene3D(viewportWidth:Number=640,viewportHeight:Number=480,isAutoScaleToStage:Boolean=false,isInteractive:Boolean=true):void {			viewport = new Viewport3D(viewportWidth,viewportHeight,isAutoScaleToStage,isInteractive,false);			addChild(viewport);			            scene = new Scene3D();              camera = new Camera3D();  			renderer = new BasicRenderEngine();           			camera.focus = 100;			camera.zoom = 10;			         	dispatchEvent(new Event(Event.COMPLETE));         	createObjects();			}				protected function createObjects():void		{					}				/**		 * Adds a method to renderMethods array		 * to be executed on ENTER_FRAME.		 * #param	method		Method to add to array.		 */		protected function addRenderMethod(method:Function):void {			renderMethods.push(method);		}				/**		 * Removes a method to renderMethods array		 * #param	method		Method to remove to array.		 */		protected function removeRenderMethod(method:Function):void {			renderMethods.splice(renderMethods.indexOf(method),1);		}				/**		 * Adds ENTER_FRAME listener.		 * start executing all methods in the renderMethods array		 * and render scene on ENTER_FRAME.		 */		protected function startRendering():void {			trace('INFO: Rendering started.');			addEventListener(Event.ENTER_FRAME,handleRenderInterval);		}				/**		 * Removes ENTER_FRAME listener.		 * Stops executing all methods in the renderMethods array		 * and stop render scene on ENTER_FRAME.		 */		protected function stopRendering():void {			trace('INFO: Rendering stopped.');			removeEventListener(Event.ENTER_FRAME,handleRenderInterval);		}				/**		 * ENTER_FRAME handler.		 * Executes all methods in the renderMethods array.		 */		private function handleRenderInterval(e:Event):void {			for each(var method:Function in renderMethods)			{				method();			}			renderer.renderScene(scene,camera,viewport);		}				/**		 * PV3D Stats Setter		 * Displays or removes StatsView.		 */		public function set showStats(v:Boolean):void		{			_showStats = v;			if(_showStats){				stats = new StatsView(renderer);				addChild(stats);			}else{				removeChild(stats);				stats = null;			}		}				/**		 * PV3D Stats Getter		 * Returns is stats is displyed or not.		 */		public function get showStats():Boolean		{			return _showStats;		}	}}