package org.redblind.math{	/**	 * @author jcipriano	 */	public class Trig	{		private static var inst:Trig;				/**		 * Returns static instance of Trig		 */		public static function gi():Trig		{			if(!inst) inst = new Trig();			return inst;		}				/**		 * Calculates distance between two display objects		 */		public function distance(objA:Object,objB:Object):Number		{			var o:Number = objA.x - objB.x;			var a:Number = objA.y - objB.y;			return Math.sqrt(o*o+a*a);		}				/**		 * Calculates the angle in degrees between two display objects		 */		public function angle(objA:Object,objB:Object):Number		{			var o:Number = objA.x - objB.x;			var a:Number = objA.y - objB.y;			return (objA.y>objB.y?180:0)-toDegs(Math.atan(o/a));		}				/**		 * Calculates all right trinagle data		 */		public function trigData(objA:Object,objB:Object):TriangleData		{			var ta:TriangleData = new TriangleData();			ta.o = objA.x - objB.x;			ta.a = objA.y - objB.y;			ta.h = Math.sqrt(ta.o*ta.o+ta.a*ta.a);			ta.c = (objA.y>objB.y?180:0)-toDegs(Math.atan(ta.o/ta.a));						return ta;		}				/**		 * Calculates X coordinate given angle and distance		 */		public function coordX(distance:Number,angle:Number,obj:Object=undefined):Number		{			return Math.sin(toRads(angle))*distance+(obj?obj.x:0);		}				/**		 * Calculates Y coordinate given angle and distance		 */		public function coordY(distance:Number,angle:Number,obj:Object=undefined):Number		{			return (Math.cos(toRads(angle))*distance-(obj?obj.y:0))*-1;		}				/**		 * Converts degrees to radians		 */		public function toRads(degrees:Number):Number		{			return degrees * Math.PI/180;		}				/**		 * Converts radians to degrees		 */		public function toDegs(radians:Number):Number		{			return radians * 180/Math.PI;		}	}}