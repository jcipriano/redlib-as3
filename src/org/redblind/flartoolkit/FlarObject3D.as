package org.redblind.flartoolkit {	import gs.easing.Quad;		import gs.TweenLite;			import org.papervision3d.core.math.Number3D;		import org.papervision3d.core.math.Matrix3D;		import org.libspark.flartoolkit.core.transmat.FLARTransMatResult;		import org.libspark.flartoolkit.pv3d.FLARBaseNode;		/**	 * FlarObject3D	 * Sets position and rotation instead of transform matrix	 * Adds marker stablization	 */	public class FlarObject3D extends FLARBaseNode 	{		private var m:Matrix3D;		private var markerSize:int;		private var forceValues:Boolean;		private var ps:Number = 2;		private var rs:Number = 2;				public function FlarObject3D()		{			super();			m = new Matrix3D();		}				/**		 * Translates matrix to rotation and position Number3D values		 */		override public function setTransformMatrix(r:FLARTransMatResult):void 		{			m.n11 =  r.m01; m.n12 =  r.m00; m.n13 =  r.m02; m.n14 =  r.m03;			m.n21 = -r.m11; m.n22 = -r.m10; m.n23 = -r.m12; m.n24 = -r.m13;			m.n31 =  r.m21; m.n32 =  r.m20; m.n33 =  r.m22; m.n34 =  r.m23;						position = new Number3D(m.n14,m.n24,m.n34);			rotation = Matrix3D.matrix2euler(m);						forceValues = false;		}				/**		 * Bypasses stablaization		 */		public function forceTransformMatrix(r:FLARTransMatResult):void 		{			forceValues = true;			setTransformMatrix(r);		}				/**		 * Set stabalization values		 */		public function setStabalization(p:Number,r:Number):void		{			ps = p;			rs = r;		}				/**		 * Sets position coordinates		 */		override public function set position(r:Number3D):void		{			if(avgPosChange(r) > ps || forceValues){				x = r.x;				y = r.y;				z = r.z;			}		}				/**		 * Sets rotation angles		 */		public function set rotation(r:Number3D):void		{			if(isStable(r) || forceValues){				rotationX = r.x;				rotationY = r.y;				rotationZ = r.z;			}		}				/**		 * Returnes average rotation change		 */		private function isStable(r:Number3D):Boolean		{			return ((Math.abs(rotationX-r.x) > 1 && Math.abs(rotationX-r.x) < 45) ||					(Math.abs(rotationY-r.y) > 1 && Math.abs(rotationY-r.y) < 45) ||					(Math.abs(rotationZ-r.z) > 1 && Math.abs(rotationZ-r.z) < 45) );		}				/**		 * Returnes average position change		 */		private function avgPosChange(r:Number3D):Number		{			return (Math.abs(x-r.x) + Math.abs(y-r.y) + Math.abs(z-r.z)) / 3;		}	}}