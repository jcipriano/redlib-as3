package org.redblind.bitmapdata{	import flash.geom.Rectangle;		import flash.display.BitmapData;			public class BlobDetector	{		private var _bitmapData:BitmapData;		private var _rect:Rectangle;		private var _blobs:Array;		private var tmpX:int;		private var tmpY:int;		private var blobRect:Rectangle;				public var _masterColor:Number = 0xFF00FF00;		public var _processedColor:Number = 0xFFFFFF00;		public var _floodfillColor:Number = 0xCCFF0000;				public var maxBlobs:int = 100;		public var minArea:Number = 0;		public var maxArea:Number = 0;				public function BlobDetector()		{			//		}				/**		 * Detect blobs and discard invalid blobs		 */		public function process(bd:BitmapData):Array		{			_bitmapData = bd;			_rect = _bitmapData.getColorBoundsRect(0xFFFFFFFF,_masterColor);			_blobs = new Array();			tmpX = 0;			tmpY = 0;			var i:int = 0;			while(!_rect.isEmpty() && (i<maxBlobs || maxBlobs==0)){			    var x:int = _rect.x;			    var y:int = _rect.y;			    var yLen:int = _rect.y + _rect.height;			    for (y; y<yLen; y++){			        if (_bitmapData.getPixel32(x,y)==_masterColor){			            _bitmapData.floodFill(x,y,_floodfillColor);			            blobRect = _bitmapData.getColorBoundsRect(0xFFFFFFFF,_floodfillColor);						var a:Number = blobRect.width*blobRect.height;						if ((a<maxArea || maxArea==0) && a>minArea){			                _blobs.push(blobRect);			                tmpX += blobRect.x;			                tmpY += blobRect.y;			            	_bitmapData.floodFill(x,y,_processedColor);			            }else{			        		_bitmapData.floodFill(x,y,0x00000000);			            }			        }			    }				_rect = _bitmapData.getColorBoundsRect(0xFFFFFFFF,_masterColor,true);			    i++;			}			_rect = _bitmapData.getColorBoundsRect(0xFFFFFFFF,_processedColor,true);						return _blobs;		}				/**		 * Getters n' Setters		 */		public function set masterColor(c:Number):void		{			 _masterColor = c;		}				public function set processedColor(c:Number):void		{			 _processedColor = c;		}				public function set floodfillColor(c:Number):void		{			 _floodfillColor = c;		}				public function get masterColor():Number { return _masterColor; }				public function get processedColor():Number { return _processedColor; }				public function get floodfillColor():Number { return _floodfillColor; }				public function get blobs():Array { return _blobs; }				public function get bitmapData():BitmapData { return _bitmapData; }				public function get rect():Rectangle { return _rect; }			}}